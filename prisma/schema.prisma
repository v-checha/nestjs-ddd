// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id
  email              String              @unique
  firstName          String
  lastName           String
  password           String
  isVerified         Boolean             @default(false)
  lastLogin          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userRoles          UserRole[]
  refreshTokens      RefreshToken[]
  verificationTokens VerificationToken[]
}

model Permission {
  id              String           @id
  name            String           @unique
  description     String
  resource        String
  action          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model Role {
  id              String           @id
  name            String           @unique
  description     String
  type            String           @default("user")
  isDefault       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  device    String? // Optional device identifier
  ipAddress String? // Optional IP address
  isRevoked Boolean  @default(false)

  @@index([userId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String // 'email-verification' or 'password-reset'
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  @@index([userId])
  @@index([token])
}
